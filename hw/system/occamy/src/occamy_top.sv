// Copyright 2020 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// Author: Florian Zaruba <zarubaf@iis.ee.ethz.ch>
// Author: Fabian Schuiki <zarubaf@iis.ee.ethz.ch>
//
// AUTOMATICALLY GENERATED by genoccamy.py; edit the script instead.
// verilog_lint: waive-start line-length

`include "common_cells/registers.svh"
`include "occamy/unpack.svh"

module occamy_top
  import occamy_pkg::*;
(
    input logic clk_i,
    input logic rst_ni,
    input logic test_mode_i,
    /// PCIe Ports
    output axi_a48_d512_i7_u0_req_t pcie_axi_req_o,
    input axi_a48_d512_i7_u0_resp_t pcie_axi_rsp_i,

    input  axi_a48_d512_i7_u0_req_t  pcie_axi_req_i,
    output axi_a48_d512_i7_u0_resp_t pcie_axi_rsp_o
    /// HBM2e Ports
    /// HBI Ports
);

  addr_t [7:0] s1_quadrant_base_addr;
  assign s1_quadrant_base_addr[0] = ClusterBaseOffset + 0 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[1] = ClusterBaseOffset + 1 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[2] = ClusterBaseOffset + 2 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[3] = ClusterBaseOffset + 3 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[4] = ClusterBaseOffset + 4 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[5] = ClusterBaseOffset + 5 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[6] = ClusterBaseOffset + 6 * S1QuadrantAddressSpace;
  assign s1_quadrant_base_addr[7] = ClusterBaseOffset + 7 * S1QuadrantAddressSpace;

  ///////////////////
  //   CROSSBARS   //
  ///////////////////

  axi_lite_a48_d64_req_t [0:0] soc_periph_xbar_in_req;
  axi_lite_a48_d64_rsp_t [0:0] soc_periph_xbar_in_rsp;
  axi_lite_a48_d64_req_t [7:0] soc_periph_xbar_out_req;
  axi_lite_a48_d64_rsp_t [7:0] soc_periph_xbar_out_rsp;

  // The `soc_periph_xbar` crossbar.
  axi_lite_xbar #(
      .Cfg      (SocPeriphXbarCfg),
      .aw_chan_t(axi_lite_a48_d64_aw_chan_t),
      .w_chan_t (axi_lite_a48_d64_w_chan_t),
      .b_chan_t (axi_lite_a48_d64_b_chan_t),
      .ar_chan_t(axi_lite_a48_d64_ar_chan_t),
      .r_chan_t (axi_lite_a48_d64_r_chan_t),
      .req_t    (axi_lite_a48_d64_req_t),
      .resp_t   (axi_lite_a48_d64_rsp_t),
      .rule_t   (xbar_rule_48_t)
  ) i_soc_periph_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_periph_xbar_in_req),
      .slv_ports_resp_o     (soc_periph_xbar_in_rsp),
      .mst_ports_req_o      (soc_periph_xbar_out_req),
      .mst_ports_resp_i     (soc_periph_xbar_out_rsp),
      .addr_map_i           (SocPeriphXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );

  /// Address map of the `soc_wide_xbar` crossbar.
  xbar_rule_48_t [8:0] SocWideXbarAddrmap;
  assign SocWideXbarAddrmap = '{
    '{ idx: 8, start_addr: 48'h80000000, end_addr: 48'h100000000 },
    '{ idx: 0, start_addr: s1_quadrant_base_addr[0], end_addr: s1_quadrant_base_addr[0] + S1QuadrantAddressSpace },
    '{ idx: 1, start_addr: s1_quadrant_base_addr[1], end_addr: s1_quadrant_base_addr[1] + S1QuadrantAddressSpace },
    '{ idx: 2, start_addr: s1_quadrant_base_addr[2], end_addr: s1_quadrant_base_addr[2] + S1QuadrantAddressSpace },
    '{ idx: 3, start_addr: s1_quadrant_base_addr[3], end_addr: s1_quadrant_base_addr[3] + S1QuadrantAddressSpace },
    '{ idx: 4, start_addr: s1_quadrant_base_addr[4], end_addr: s1_quadrant_base_addr[4] + S1QuadrantAddressSpace },
    '{ idx: 5, start_addr: s1_quadrant_base_addr[5], end_addr: s1_quadrant_base_addr[5] + S1QuadrantAddressSpace },
    '{ idx: 6, start_addr: s1_quadrant_base_addr[6], end_addr: s1_quadrant_base_addr[6] + S1QuadrantAddressSpace },
    '{ idx: 7, start_addr: s1_quadrant_base_addr[7], end_addr: s1_quadrant_base_addr[7] + S1QuadrantAddressSpace }
  };

  soc_wide_xbar_in_req_t   [9:0] soc_wide_xbar_in_req;
  soc_wide_xbar_in_resp_t  [9:0] soc_wide_xbar_in_rsp;
  soc_wide_xbar_out_req_t  [8:0] soc_wide_xbar_out_req;
  soc_wide_xbar_out_resp_t [8:0] soc_wide_xbar_out_rsp;

  axi_xbar #(
      .Cfg(SocWideXbarCfg),
      .Connectivity  ( 90'b011111111111111111101111111110111111111011111111101111111110111111111011111111101111111110 ),
      .slv_aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .mst_aw_chan_t(axi_a48_d512_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .slv_b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .mst_b_chan_t(axi_a48_d512_i7_u0_b_chan_t),
      .slv_ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .mst_ar_chan_t(axi_a48_d512_i7_u0_ar_chan_t),
      .slv_r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .mst_r_chan_t(axi_a48_d512_i7_u0_r_chan_t),
      .slv_req_t(axi_a48_d512_i3_u0_req_t),
      .slv_resp_t(axi_a48_d512_i3_u0_resp_t),
      .mst_req_t(axi_a48_d512_i7_u0_req_t),
      .mst_resp_t(axi_a48_d512_i7_u0_resp_t),
      .rule_t(xbar_rule_48_t)
  ) i_soc_wide_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_wide_xbar_in_req),
      .slv_ports_resp_o     (soc_wide_xbar_in_rsp),
      .mst_ports_req_o      (soc_wide_xbar_out_req),
      .mst_ports_resp_i     (soc_wide_xbar_out_rsp),
      .addr_map_i           (SocWideXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );

  /// Address map of the `soc_narrow_xbar` crossbar.
  xbar_rule_48_t [9:0] SocNarrowXbarAddrmap;
  assign SocNarrowXbarAddrmap = '{
    '{ idx: 8, start_addr: 48'h00000000, end_addr: 48'h00050000 },
    '{ idx: 9, start_addr: 48'h80000000, end_addr: 48'h100000000 },
    '{ idx: 0, start_addr: s1_quadrant_base_addr[0], end_addr: s1_quadrant_base_addr[0] + S1QuadrantAddressSpace },
    '{ idx: 1, start_addr: s1_quadrant_base_addr[1], end_addr: s1_quadrant_base_addr[1] + S1QuadrantAddressSpace },
    '{ idx: 2, start_addr: s1_quadrant_base_addr[2], end_addr: s1_quadrant_base_addr[2] + S1QuadrantAddressSpace },
    '{ idx: 3, start_addr: s1_quadrant_base_addr[3], end_addr: s1_quadrant_base_addr[3] + S1QuadrantAddressSpace },
    '{ idx: 4, start_addr: s1_quadrant_base_addr[4], end_addr: s1_quadrant_base_addr[4] + S1QuadrantAddressSpace },
    '{ idx: 5, start_addr: s1_quadrant_base_addr[5], end_addr: s1_quadrant_base_addr[5] + S1QuadrantAddressSpace },
    '{ idx: 6, start_addr: s1_quadrant_base_addr[6], end_addr: s1_quadrant_base_addr[6] + S1QuadrantAddressSpace },
    '{ idx: 7, start_addr: s1_quadrant_base_addr[7], end_addr: s1_quadrant_base_addr[7] + S1QuadrantAddressSpace }
  };

  soc_narrow_xbar_in_req_t   [7:0] soc_narrow_xbar_in_req;
  soc_narrow_xbar_in_resp_t  [7:0] soc_narrow_xbar_in_rsp;
  soc_narrow_xbar_out_req_t  [9:0] soc_narrow_xbar_out_req;
  soc_narrow_xbar_out_resp_t [9:0] soc_narrow_xbar_out_rsp;

  axi_xbar #(
      .Cfg(SocNarrowXbarCfg),
      .Connectivity  ( 80'b11011111111110111111111101111111111011111111110111111111101111111111011111111110 ),
      .slv_aw_chan_t(axi_a48_d64_i4_u0_aw_chan_t),
      .mst_aw_chan_t(axi_a48_d64_i7_u0_aw_chan_t),
      .w_chan_t(axi_a48_d64_i4_u0_w_chan_t),
      .slv_b_chan_t(axi_a48_d64_i4_u0_b_chan_t),
      .mst_b_chan_t(axi_a48_d64_i7_u0_b_chan_t),
      .slv_ar_chan_t(axi_a48_d64_i4_u0_ar_chan_t),
      .mst_ar_chan_t(axi_a48_d64_i7_u0_ar_chan_t),
      .slv_r_chan_t(axi_a48_d64_i4_u0_r_chan_t),
      .mst_r_chan_t(axi_a48_d64_i7_u0_r_chan_t),
      .slv_req_t(axi_a48_d64_i4_u0_req_t),
      .slv_resp_t(axi_a48_d64_i4_u0_resp_t),
      .mst_req_t(axi_a48_d64_i7_u0_req_t),
      .mst_resp_t(axi_a48_d64_i7_u0_resp_t),
      .rule_t(xbar_rule_48_t)
  ) i_soc_narrow_xbar (
      .clk_i                (clk_i),
      .rst_ni               (rst_ni),
      .test_i               (test_mode_i),
      .slv_ports_req_i      (soc_narrow_xbar_in_req),
      .slv_ports_resp_o     (soc_narrow_xbar_in_rsp),
      .mst_ports_req_o      (soc_narrow_xbar_out_req),
      .mst_ports_resp_i     (soc_narrow_xbar_out_rsp),
      .addr_map_i           (SocNarrowXbarAddrmap),
      .en_default_mst_port_i('1),
      .default_mst_port_i   ('0)
  );


  /////////////////////////////
  // Narrow to Wide Crossbar //
  /////////////////////////////
  axi_a48_d64_i3_u0_req_t  soc_narrow_wide_iwc_req;
  axi_a48_d64_i3_u0_resp_t soc_narrow_wide_iwc_rsp;

  axi_id_remap #(
      .AxiSlvPortIdWidth(7),
      .AxiSlvPortMaxUniqIds(4),
      .AxiMaxTxnsPerId(4),
      .AxiMstPortIdWidth(3),
      .slv_req_t(axi_a48_d64_i7_u0_req_t),
      .slv_resp_t(axi_a48_d64_i7_u0_resp_t),
      .mst_req_t(axi_a48_d64_i3_u0_req_t),
      .mst_resp_t(axi_a48_d64_i3_u0_resp_t)
  ) i_soc_narrow_wide_iwc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_SOC_WIDE]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_SOC_WIDE]),
      .mst_req_o(soc_narrow_wide_iwc_req),
      .mst_resp_i(soc_narrow_wide_iwc_rsp)
  );
  axi_dw_converter #(
      .AxiSlvPortDataWidth(64),
      .AxiMstPortDataWidth(512),
      .AxiAddrWidth(48),
      .AxiIdWidth(3),
      .aw_chan_t(axi_a48_d512_i3_u0_aw_chan_t),
      .mst_w_chan_t(axi_a48_d512_i3_u0_w_chan_t),
      .slv_w_chan_t(axi_a48_d64_i3_u0_w_chan_t),
      .b_chan_t(axi_a48_d512_i3_u0_b_chan_t),
      .ar_chan_t(axi_a48_d512_i3_u0_ar_chan_t),
      .mst_r_chan_t(axi_a48_d512_i3_u0_r_chan_t),
      .slv_r_chan_t(axi_a48_d64_i3_u0_r_chan_t),
      .axi_mst_req_t(axi_a48_d512_i3_u0_req_t),
      .axi_mst_resp_t(axi_a48_d512_i3_u0_resp_t),
      .axi_slv_req_t(axi_a48_d64_i3_u0_req_t),
      .axi_slv_resp_t(axi_a48_d64_i3_u0_resp_t)
  ) i_soc_narrow_wide_dw (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .slv_req_i(soc_narrow_wide_iwc_req),
      .slv_resp_o(soc_narrow_wide_iwc_rsp),
      .mst_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_SOC_NARROW]),
      .mst_resp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_SOC_NARROW])
  );



  /////////////////
  // Peripherals //
  /////////////////
  axi_to_axi_lite #(
      .AxiAddrWidth(48),
      .AxiDataWidth(64),
      .AxiIdWidth(7),
      .AxiUserWidth(1),
      .AxiMaxWriteTxns(4),
      .AxiMaxReadTxns(4),
      .FallThrough(0),
      .full_req_t(axi_a48_d64_i7_u0_req_t),
      .full_resp_t(axi_a48_d64_i7_u0_resp_t),
      .lite_req_t(axi_lite_a48_d64_req_t),
      .lite_resp_t(axi_lite_a48_d64_rsp_t)
  ) i_soc_narrow_periph_pc (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_i(test_mode_i),
      .slv_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_PERIPH]),
      .slv_resp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_PERIPH]),
      .mst_req_o(soc_periph_xbar_in_req[SOC_PERIPH_XBAR_IN_SOC]),
      .mst_resp_i(soc_periph_xbar_in_rsp[SOC_PERIPH_XBAR_IN_SOC])
  );



  //////////
  // PCIe //
  //////////
  assign pcie_axi_req_o = soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_PCIE];
  assign soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_PCIE] = pcie_axi_rsp_i;
  assign soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_PCIE] = pcie_axi_req_i;
  assign pcie_axi_rsp_o = soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_PCIE];


  ////////////////////
  // S1 Quadrants 0 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_0 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd0),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_0]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_0]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_0]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_0]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_0]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_0]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_0]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_0])
  );

  ////////////////////
  // S1 Quadrants 1 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_1 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd1),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_1]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_1]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_1]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_1]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_1]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_1]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_1]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_1])
  );

  ////////////////////
  // S1 Quadrants 2 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_2 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd2),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_2]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_2]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_2]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_2]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_2]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_2]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_2]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_2])
  );

  ////////////////////
  // S1 Quadrants 3 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_3 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd3),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_3]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_3]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_3]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_3]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_3]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_3]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_3]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_3])
  );

  ////////////////////
  // S1 Quadrants 4 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_4 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd4),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_4]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_4]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_4]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_4]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_4]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_4]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_4]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_4])
  );

  ////////////////////
  // S1 Quadrants 5 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_5 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd5),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_5]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_5]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_5]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_5]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_5]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_5]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_5]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_5])
  );

  ////////////////////
  // S1 Quadrants 6 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_6 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd6),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_6]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_6]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_6]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_6]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_6]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_6]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_6]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_6])
  );

  ////////////////////
  // S1 Quadrants 7 //
  ////////////////////

  occamy_quadrant_s1 i_occamy_quadrant_s1_7 (
      .clk_i(clk_i),
      .rst_ni(rst_ni),
      .test_mode_i(test_mode_i),
      .tile_id_i(6'd7),
      .debug_req_i('0),
      .meip_i('0),
      .mtip_i('0),
      .msip_i('0),
      .quadrant_narrow_out_req_o(soc_narrow_xbar_in_req[SOC_NARROW_XBAR_IN_S1_QUADRANT_7]),
      .quadrant_narrow_out_rsp_i(soc_narrow_xbar_in_rsp[SOC_NARROW_XBAR_IN_S1_QUADRANT_7]),
      .quadrant_narrow_in_req_i(soc_narrow_xbar_out_req[SOC_NARROW_XBAR_OUT_S1_QUADRANT_7]),
      .quadrant_narrow_in_rsp_o(soc_narrow_xbar_out_rsp[SOC_NARROW_XBAR_OUT_S1_QUADRANT_7]),
      .quadrant_wide_out_req_o(soc_wide_xbar_in_req[SOC_WIDE_XBAR_IN_S1_QUADRANT_7]),
      .quadrant_wide_out_rsp_i(soc_wide_xbar_in_rsp[SOC_WIDE_XBAR_IN_S1_QUADRANT_7]),
      .quadrant_wide_in_req_i(soc_wide_xbar_out_req[SOC_WIDE_XBAR_OUT_S1_QUADRANT_7]),
      .quadrant_wide_in_rsp_o(soc_wide_xbar_out_rsp[SOC_WIDE_XBAR_OUT_S1_QUADRANT_7])
  );


endmodule
// verilog_lint: waive-off line-length
